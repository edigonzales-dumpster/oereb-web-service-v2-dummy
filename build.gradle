buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.4.RELEASE")
    }
}

plugins {
	id "java"
	//id "maven"
	id 'org.asciidoctor.jvm.convert' version '3.1.0'
	id 'org.asciidoctor.jvm.pdf' version '3.1.0'
}

apply plugin: 'org.springframework.boot'
//apply plugin: 'io.spring.dependency-management'

group 'ch.ehi.oereb'

version '0.9.1'+System.getProperty('release','-SNAPSHOT')


sourceCompatibility = "1.8" 
targetCompatibility = "1.8"
compileJava.options.encoding = 'US-ASCII'


// to get the latest SNAPSHOT uncomment the following lines
//configurations.all {
    // check for updates every build
    // resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
//}

configurations {
    jaxb
    deployerJars
}

dependencies {
    //compile group: 'org.slf4j', name: 'slf4j-api', version: "1.7.25"
    //compile group: 'org.slf4j', name: 'slf4j-simple', version: "1.7.25"
    testCompile group: 'ch.interlis', name: 'ili2pg', version: '4.4.2'
    testCompile group: 'ch.interlis', name: 'ili2c-tool', version: '5.0.8'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.xmlunit', name: 'xmlunit-matchers', version: '2.6.4'
    testCompile group: 'org.xmlunit', name: 'xmlunit-core', version: '2.6.4'
    testCompile group: 'org.xmlunit', name: 'xmlunit-placeholders', version: '2.6.4'
    
	compile group: 'com.vividsolutions', name: 'jts-core', version: '1.14.0'
	compile 'commons-io:commons-io:2.6'
	compile ('ch.so.agi.oereb:pdf4oereb:1.0.+') {
    	exclude group: 'org.slf4j', module: 'slf4j-simple'
	}
	//compile group: 'org.postgresql', name: 'postgresql', version: '42.2.6' // add as compileOnly, so that eclipse sees it
	compile	group: 'javax.xml.bind',name:'jaxb-api', version:'2.3.1'
	compile	group: 'com.sun.xml.bind',name:'jaxb-core', version:'2.3.0.1'
	compile	group: 'com.sun.xml.bind',name:'jaxb-impl', version:'2.3.2'
	compile group: 'javax.activation', name: 'activation', version: '1.1.1'
    compile("org.springframework.boot:spring-boot-starter-web:2.1.4.RELEASE")
    //compile("org.springframework.boot:spring-boot-starter-jdbc:2.1.4.RELEASE")
    compile("org.springframework:spring-oxm:5.1.6.RELEASE")
    compile('org.springframework.boot:spring-boot-starter-test:2.1.4.RELEASE')
    jaxb (
		'com.sun.xml.bind:jaxb-xjc:2.3.1',
		'javax.xml.bind:jaxb-api:2.3.1',
		'com.sun.xml.bind:jaxb-core:2.3.0.1',
		'com.sun.xml.bind:jaxb-impl:2.3.2',
		'javax.activation:activation:1.1.1'
    )
    deployerJars "org.apache.maven.wagon:wagon-ftp:3.3.3"
    deployerJars "org.apache.maven.wagon:wagon-ssh:3.3.3"
}

repositories {
	mavenLocal()
	mavenCentral()
	jcenter()
    maven {
        url "http://jars.interlis.ch"
    }
}

def generatedXjcSources = "$buildDir/xjc/java"

Properties properties = new Properties()
File propFile=project.rootProject.file('user.properties')
if(propFile.exists()){
	properties.load(propFile.newDataInputStream())
}
def git = System.getProperty('git',properties.get('git','git'))
def repos_pwd = System.getProperty('repos_pwd',properties.get('repos_pwd','repos_pwd'))
def repos_usr = System.getProperty('repos_usr',properties.get('repos_usr','repos_usr'))
def repos_url = System.getProperty('repos_url',properties.get('repos_url','repos_url'))
def spring_config_location = System.getProperty('spring_config_location','file:./')

def generatedResources = "$buildDir/generated-resources/main"

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine git, 'rev-parse', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

ext {
	buildNumber = getGitHash()
}

sourceSets {
    main {
    	//output.dir(generatedResources, builtBy: 'generateMyResources')
        java {
            srcDirs = ['src/main/java',"$generatedXjcSources"]
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

task generateMyResources {
	doLast {
		def versionProps = new Properties()
		versionProps.setProperty('version', "$project.version")
		versionProps.setProperty('versionCommit', getGitHash())
		def versionPropsFile = new File(generatedResources,"ch/ehi/oereb/webservice/Version.properties")
		versionPropsFile.getParentFile().mkdirs();
		versionProps.store(versionPropsFile.newWriter(), null);
	}
}
task jaxb {
    System.setProperty('javax.xml.accessExternalSchema', 'all')
    inputs.files fileTree(dir: 'src/main/xsd', include: ['*.xsd'])
    inputs.files fileTree(dir: 'src/main/xjb', include: ['*.xjb'])
    outputs.files fileTree(dir: "$generatedXjcSources")
    
    doLast {
        mkdir "$generatedXjcSources"

        ant.taskdef(
			name: 'xjc',
			classname: 'com.sun.tools.xjc.XJCTask',
			classpath: configurations.jaxb.asPath
        )

        ant.xjc(
			destdir: "$generatedXjcSources",
			language: 'XMLSCHEMA',
			extension: true
        ){
            schema(dir: "src/main/xsd", includes: "OeREB/2.0/*.xsd,geometry/2.4/geometry.xsd")
            binding(dir: "src/main/xjb", includes: "global.xjb,OeREB.xjb,xmldsig-core-schema.xjb")
            //arg(value: '-verbose')
        }
    }
}
compileJava.dependsOn jaxb


jar {
	enabled = true
}

bootJar {
	classifier = 'boot'
}

asciidoctor {
    sourceDir  file('docs/asciidoc')
    outputDir  file('build/docs')
}

asciidoctorPdf {
    sourceDir  file('docs/asciidoc')
    outputDir  file('build/docs')
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

test{
	systemProperty 'spring.config.location', spring_config_location
}

javadoc{
	failOnError = false
	options.addBooleanOption 'Xdoclint:none', true
	//options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

/*
artifacts {
    archives sourcesJar
    archives javadocJar
}

def githubRepoUrl = 'https://github.com/claeis/oereb-web-service'

def pomConfig = {
    licenses {
        license {
            name "LGPL 2.1"
            url "https://github.com/claeis/oereb-web-service/blob/master/LICENSE"
        }
    }
    developers {
        developer {
            id "claeis"
            name "Claude Eisenhut"
            email "ce@eisenhutinformatik.ch"
        }
    }

    scm {
        url githubRepoUrl
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
        	configuration = configurations.deployerJars
			repository(url: repos_url){
            	authentication(userName: repos_usr, password: repos_pwd)
            }
        }
    }
}
*/